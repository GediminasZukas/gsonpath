package gsonpath.generator.adapter.auto;

import com.google.common.base.Joiner;
import org.junit.Test;

/**
 * Created by Lachlan on 2/03/2016.
 */
public class NestedJsonTest extends BaseAutoTest {

    @Test
    public void testFlatteningUsingFields() {
        String source = Joiner.on('\n').join(
                STANDARD_PACKAGE_NAME,
                IMPORT_GSON_PATH_CLASS,
                IMPORT_GSON_PATH_ELEMENT,
                "@AutoGsonAdapter",
                "public class Test {",
                "    @SerializedName(\"Json1\")",
                "    public int value1;",
                "    @SerializedName(\"Json2.Nest1\")",
                "    public int value2;",
                "    @SerializedName(\"Json2.Nest2.EndPoint1\")",
                "    public int value3;",
                "    @SerializedName(\"Json2.Nest2.EndPoint2\")",
                "    public int value4;",
                "}"
        );

        String expectedSource = Joiner.on('\n').join(
                STANDARD_RESULT_PACKAGE_AND_IMPORTS,
                STANDARD_RESULT_HEADER,
                "int jsonFieldCounter0 = 0;",
                "in.beginObject();",
                "",
                "while (in.hasNext()) {",
                "    if (jsonFieldCounter0 == 2) {",
                "        in.skipValue();",
                "        continue;",
                "    }",
                "",
                "    switch(in.nextName()) {",
                "        case \"Json1\":",
                "            jsonFieldCounter0++;",
                "            result.value1 = in.nextInt();",
                "            break;",
                "",
                "        case \"Json2\":",
                "            jsonFieldCounter0++;",
                "",
                "            // Ensure the object is not null.",
                "            if (!isValidValue(in)) {",
                "                break;",
                "            }",
                "",
                "            int jsonFieldCounter1 = 0;",
                "            in.beginObject();",
                "",
                "            while (in.hasNext()) {",
                "                if (jsonFieldCounter1 == 2) {",
                "                    in.skipValue();",
                "                    continue;",
                "                }",
                "",
                "                switch(in.nextName()) {",
                "                    case \"Nest1\":",
                "                        jsonFieldCounter1++;",
                "                        result.value2 = in.nextInt();",
                "                        break;",
                "",
                "                    case \"Nest2\":",
                "                        jsonFieldCounter1++;",
                "",
                "                        // Ensure the object is not null.",
                "                        if (!isValidValue(in)) {",
                "                            break;",
                "                        }",
                "",
                "                        int jsonFieldCounter2 = 0;",
                "                        in.beginObject();",
                "",
                "                        while (in.hasNext()) {",
                "                            if (jsonFieldCounter2 == 2) {",
                "                                in.skipValue();",
                "                                continue;",
                "                            }",
                "",
                "                            switch(in.nextName()) {",
                "                                case \"EndPoint1\":",
                "                                    jsonFieldCounter2++;",
                "                                    result.value3 = in.nextInt();",
                "                                    break;",
                "",
                "                                case \"EndPoint2\":",
                "                                    jsonFieldCounter2++;",
                "                                    result.value4 = in.nextInt();",
                "                                    break;",
                "",
                "                                default:",
                "                                    in.skipValue();",
                "                                    break;",
                "                            }",
                "                        }",
                "",
                "                        in.endObject();",
                "                        break;",
                "",
                "                    default:",
                "                        in.skipValue();",
                "                        break;",
                "                }",
                "            }",
                "",
                "            in.endObject();",
                "            break;",
                "",
                "        default:",
                "            in.skipValue();",
                "            break;",
                "    }",
                "}",
                "",
                "in.endObject();",
                STANDARD_RESULT_FOOTER
        );

        assertGeneratedContent(source, expectedSource);
    }

    @Test
    public void testFlatteningUsingRootField() {
        String source = Joiner.on('\n').join(
                STANDARD_PACKAGE_NAME,
                IMPORT_GSON_PATH_CLASS,
                IMPORT_GSON_PATH_ELEMENT,
                "@AutoGsonAdapter(rootField = \"Root.Nest1\")",
                "public class Test {",
                "    public int value1;",
                "}"
        );

        String expectedSource = Joiner.on('\n').join(
                STANDARD_RESULT_PACKAGE_AND_IMPORTS,
                STANDARD_RESULT_HEADER,
                "int jsonFieldCounter0 = 0;",
                "in.beginObject();",
                "",
                "while (in.hasNext()) {",
                "    if (jsonFieldCounter0 == 1) {",
                "        in.skipValue();",
                "        continue;",
                "    }",
                "",
                "    switch(in.nextName()) {",
                "        case \"Root\":",
                "            jsonFieldCounter0++;",
                "",
                "            // Ensure the object is not null.",
                "            if (!isValidValue(in)) {",
                "                break;",
                "            }",
                "",
                "            int jsonFieldCounter1 = 0;",
                "            in.beginObject();",
                "",
                "            while (in.hasNext()) {",
                "                if (jsonFieldCounter1 == 1) {",
                "                    in.skipValue();",
                "                    continue;",
                "                }",
                "",
                "                switch(in.nextName()) {",
                "                    case \"Nest1\":",
                "                        jsonFieldCounter1++;",
                "",
                "                        // Ensure the object is not null.",
                "                        if (!isValidValue(in)) {",
                "                            break;",
                "                        }",
                "",
                "                        int jsonFieldCounter2 = 0;",
                "                        in.beginObject();",
                "",
                "                        while (in.hasNext()) {",
                "                            if (jsonFieldCounter2 == 1) {",
                "                                in.skipValue();",
                "                                continue;",
                "                            }",
                "",
                "                            switch(in.nextName()) {",
                "                                case \"value1\":",
                "                                    jsonFieldCounter2++;",
                "                                    result.value1 = in.nextInt();",
                "                                    break;",
                "",
                "                                default:",
                "                                    in.skipValue();",
                "                                    break;",
                "                            }",
                "                        }",
                "",
                "                        in.endObject();",
                "                        break;",
                "",
                "                    default:",
                "                        in.skipValue();",
                "                        break;",
                "                }",
                "            }",
                "",
                "            in.endObject();",
                "            break;",
                "",
                "        default:",
                "            in.skipValue();",
                "            break;",
                "    }",
                "}",
                "",
                "in.endObject();",
                STANDARD_RESULT_FOOTER
        );

        assertGeneratedContent(source, expectedSource);
    }

    @Test
    public void testFlatteningUsingFieldAutoComplete() {
        String source = Joiner.on('\n').join(
                STANDARD_PACKAGE_NAME,
                IMPORT_GSON_PATH_CLASS,
                IMPORT_GSON_PATH_ELEMENT,
                "@AutoGsonAdapter",
                "public class Test {",
                "    @SerializedName(\"Json1.\")",
                "    public int value1;",
                "}"
        );

        String expectedSource = Joiner.on('\n').join(
                STANDARD_RESULT_PACKAGE_AND_IMPORTS,
                STANDARD_RESULT_HEADER,
                "int jsonFieldCounter0 = 0;",
                "in.beginObject();",
                "",
                "while (in.hasNext()) {",
                "    if (jsonFieldCounter0 == 1) {",
                "        in.skipValue();",
                "        continue;",
                "    }",
                "",
                "    switch(in.nextName()) {",
                "        case \"Json1\":",
                "            jsonFieldCounter0++;",
                "",
                "            // Ensure the object is not null.",
                "            if (!isValidValue(in)) {",
                "                break;",
                "            }",
                "",
                "            int jsonFieldCounter1 = 0;",
                "            in.beginObject();",
                "",
                "            while (in.hasNext()) {",
                "                if (jsonFieldCounter1 == 1) {",
                "                    in.skipValue();",
                "                    continue;",
                "                }",
                "",
                "                switch(in.nextName()) {",
                "                    case \"value1\":",
                "                        jsonFieldCounter1++;",
                "                        result.value1 = in.nextInt();",
                "                        break;",
                "",
                "                    default:",
                "                        in.skipValue();",
                "                        break;",
                "                }",
                "            }",
                "",
                "            in.endObject();",
                "            break;",
                "",
                "        default:",
                "            in.skipValue();",
                "            break;",
                "    }",
                "}",
                "",
                "in.endObject();",
                STANDARD_RESULT_FOOTER
        );

        assertGeneratedContent(source, expectedSource);
    }

}
